local dap = require('dap')
dap.adapters.codelldb = {
  type = 'server',
  port = "${port}",
  executable = {
    -- CHANGE THIS to your path!
    command = '/absolute/path/to/codelldb/extension/adapter/codelldb',
    args = { "--port", "${port}" },

    -- On windows you may have to uncomment this:
    -- detached = false,
  }
}

dap.configurations.cpp = {
  {
    name = "Launch file",
    type = "codelldb",
    request = "launch",
    program = function()
      return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file')
    end,
    cwd = '${workspaceFolder}',
    stopOnEntry = false,
  },
}
dap.configurations.c = dap.configurations.cpp
dap.configurations.rust = dap.configurations.cpp

--Features
-- launch debug adapter
-- attach to debug adapter
-- toggle breakpoints
-- breakpoints with conditions
-- logpoints
-- set exception breakpoints
-- step over, step into, step out
-- step back, reverse continue
-- Goto
-- restart
-- stop
-- pause
-- evaluate expressions
-- REPL (incl. commands to show threads, frames and scopes)

-- Random dudes from matrix config
-- dap
local M = {}

local required_modules = {
"neodev",
"dap",
"dapui",
}

--wrap the following code in a setup function associated with M
M.setup = function()
for _, module_name in ipairs(required_modules) do
local ok, err = pcall(require, module_name)
if not ok then
vim.notify(
string.format(
"ðŸ‘Ž %s not found. Dap error: %s",
module_name,
err
),
vim.log.levels.ERROR
)
end
end

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
local plugin = require("dapui")
plugin.setup()
--------------------------------------------------------------------------------

-- type checking for nvim-dap-ui
require("neodev").setup({
    library = { plugins = { "nvim-dap-ui" }, types = true },
})
--------------------------------------------------------------------------------
local dap, dapui = require("dap"), require("dapui")
dap.configurations.rust = {
    {
        externalConsole = true,
    },
}
dap.defaults.fallback.external_terminal = {
    command = "/Applications/Alacritty.app/Contents/MacOS/alacritty",
    args = { "-e" },
}
dap.defaults.fallback.switchbuf = "usetab,uselast"

dap.listeners.after.event_initialized["dapui_config"] = function()
    dapui.open()
end

dap.listeners.before.event_terminated["dapui_config"] = function()
    dapui.close()
end

dap.listeners.before.event_exited["dapui_config"] = function()
    dapui.close()
end

vim.keymap.set(
    "n",
    "<Leader>dt",
    ":DapToggleBreakpoint<CR>",
    { noremap = true }
)
vim.keymap.set("n", "<Leader>dx", ":DapTerminate<CR>", { noremap = true })
vim.keymap.set("n", "<Leader>do", ":DapStepOver<CR>", { noremap = true })
vim.keymap.set("n", "<Leader>dc", ":DapContinue<CR>", { noremap = true })
vim.keymap.set("n", "<Leader>di", ":DapStepInto<CR>", { noremap = true })
vim.keymap.set(
    "n",
    "<Leader>dr",
    ":lua require('dapui').open({reset = true})<CR>",
    { noremap = true }
)
end

return M

-- END
